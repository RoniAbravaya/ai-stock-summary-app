name: Deploy to Play Store

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      track:
        description: 'Release track'
        required: true
        default: 'internal'
        type: choice
        options:
        - internal
        - alpha
        - beta
        - production

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
        
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        channel: 'stable'
        cache: true
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
        
    - name: Install backend dependencies
      run: |
        cd backend
        npm ci
        
    - name: Auto-increment version
      id: version
      run: |
        cd backend
        NEW_VERSION=$(node scripts/auto-increment-version.js)
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "âœ… New version: $NEW_VERSION"
        
    - name: Evaluate secrets and set flags
      shell: bash
      run: |
        FAIL_UPLOAD=false
        # Check either UPLOAD_KEYSTORE_BASE64 or KEYSTORE_BASE64 is provided
        if [ -z "${UPLOAD_KEYSTORE_BASE64}" ] && [ -z "${KEYSTORE_BASE64}" ]; then
          echo "Missing secret: UPLOAD_KEYSTORE_BASE64 (or KEYSTORE_BASE64)"; FAIL_UPLOAD=true
        fi
        for s in KEYSTORE_PASSWORD KEY_ALIAS KEY_PASSWORD PLAY_CONSOLE_SA_JSON; do
          if [ -z "${!s}" ]; then echo "Missing secret: $s"; FAIL_UPLOAD=true; fi
        done
        if [ "$FAIL_UPLOAD" = "true" ]; then
          if [ "$GITHUB_EVENT_NAME" = "workflow_dispatch" ]; then
            echo "FALLBACK_DEBUG=true" >> $GITHUB_ENV
          else
            echo "Required secrets missing for release upload on push. Failing." >&2
            exit 1
          fi
        fi
      env:
        UPLOAD_KEYSTORE_BASE64: ${{ secrets.UPLOAD_KEYSTORE_BASE64 }}
        KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
        KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
        KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
        KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        PLAY_CONSOLE_SA_JSON: ${{ secrets.PLAY_CONSOLE_SA_JSON }}
        GITHUB_EVENT_NAME: ${{ github.event_name }}

    - name: Setup Android signing
      if: env.FALLBACK_DEBUG != 'true'
      run: |
        cd mobile-app/android
        echo "${{ secrets.UPLOAD_KEYSTORE_BASE64 || secrets.KEYSTORE_BASE64 }}" | base64 --decode --ignore-garbage > app/upload-keystore.jks
        printf "storeFile=upload-keystore.jks\nstorePassword=%s\nkeyAlias=%s\nkeyPassword=%s\n" \
          "${{ secrets.KEYSTORE_PASSWORD }}" "${{ secrets.KEY_ALIAS }}" "${{ secrets.KEY_PASSWORD }}" > key.properties
        # Validate keystore
        if ! keytool -list -keystore app/upload-keystore.jks -storepass "${{ secrets.KEYSTORE_PASSWORD }}" >/dev/null 2>&1; then
          echo "Keystore validation failed. Falling back to debug build."
          echo "FALLBACK_DEBUG=true" >> $GITHUB_ENV
        fi

    - name: Debug keystore decoding
      if: env.FALLBACK_DEBUG != 'true'
      shell: bash
      run: |
        echo "Decoding keystore to /tmp/uk.jks for validation (size only)"
        echo "${{ secrets.UPLOAD_KEYSTORE_BASE64 || secrets.KEYSTORE_BASE64 }}" | base64 --decode --ignore-garbage > /tmp/uk.jks
        echo -n "Decoded keystore bytes: "
        wc -c < /tmp/uk.jks | tr -d '\n'; echo
        keytool -list -keystore /tmp/uk.jks -storepass "${{ secrets.KEYSTORE_PASSWORD }}" >/dev/null 2>&1 && echo "keytool: OK" || echo "keytool: FAIL"
        
    - name: Setup Firebase config
      run: |
        cd mobile-app/android/app
        echo "${{ secrets.GOOGLE_SERVICES_JSON }}" | base64 --decode --ignore-garbage > google-services.json
        
    - name: Build AAB
      if: env.FALLBACK_DEBUG != 'true'
      run: |
        cd mobile-app
        flutter pub get
        flutter build appbundle --release --no-tree-shake-icons
        
    - name: Setup Play Console service account
      if: env.FALLBACK_DEBUG != 'true'
      run: |
        echo "${{ secrets.PLAY_CONSOLE_SA_JSON }}" | base64 --decode --ignore-garbage > play-console-sa.json
        
    - name: Upload to Play Store
      if: env.FALLBACK_DEBUG != 'true'
      run: |
        cd backend
        TRACK="${{ github.event.inputs.track || 'internal' }}"
        node scripts/upload-to-play.js com.ai_stock_summary ../mobile-app/build/app/outputs/bundle/release/app-release.aab ../play-console-sa.json $TRACK

    - name: Build debug APK (fallback)
      if: env.FALLBACK_DEBUG == 'true'
      run: |
        cd mobile-app
        flutter pub get
        flutter build apk --debug

    - name: Upload APK artifact (fallback)
      if: env.FALLBACK_DEBUG == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: ai-stock-summary-debug-apk
        path: mobile-app/build/app/outputs/apk/debug/app-debug.apk
        
    - name: Commit version bump
      if: success()
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add mobile-app/pubspec.yaml
        git commit -m "chore: bump version to ${{ steps.version.outputs.new_version }}" || exit 0
        git push
