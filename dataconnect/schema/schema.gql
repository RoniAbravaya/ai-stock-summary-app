type Stock {
  id: ID!
  symbol: String!
  name: String!
  price: Float!
  change: Float!
  changePercent: Float!
  volume: Int!
  marketCap: Float!
  pe: Float
  sector: String
  news: [NewsArticle!]!
  createdAt: String!
  updatedAt: String!
}

type NewsArticle {
  id: ID!
  title: String!
  content: String!
  summary: String
  source: String!
  url: String!
  imageUrl: String
  publishedAt: String!
  stock: Stock!
  stockId: ID!
  createdAt: String!
  updatedAt: String!
}

input StockInput {
  symbol: String!
  name: String!
  price: Float!
  change: Float!
  changePercent: Float!
  volume: Int!
  marketCap: Float!
  pe: Float
  sector: String
}

input NewsArticleInput {
  title: String!
  content: String!
  summary: String
  source: String!
  url: String!
  imageUrl: String
  publishedAt: String!
  stockId: ID!
}

type Query {
  stock(id: ID!): Stock
  stockBySymbol(symbol: String!): Stock
  listStocks(filter: StockFilter, limit: Int, nextToken: String): StockConnection!
  newsArticle(id: ID!): NewsArticle
  listNewsArticles(filter: NewsArticleFilter, limit: Int, nextToken: String): NewsArticleConnection!
  newsForStock(stockId: ID!, limit: Int, nextToken: String): NewsArticleConnection!
}

type Mutation {
  createStock(input: StockInput!): Stock!
  updateStock(id: ID!, input: StockInput!): Stock!
  deleteStock(id: ID!): Stock!
  createNewsArticle(input: NewsArticleInput!): NewsArticle!
  updateNewsArticle(id: ID!, input: NewsArticleInput!): NewsArticle!
  deleteNewsArticle(id: ID!): NewsArticle!
}

type StockConnection {
  items: [Stock!]!
  nextToken: String
}

type NewsArticleConnection {
  items: [NewsArticle!]!
  nextToken: String
}

input StockFilter {
  symbol: String
  sector: String
  priceGreaterThan: Float
  priceLessThan: Float
}

input NewsArticleFilter {
  stockId: ID
  source: String
  publishedAfter: String
  publishedBefore: String
}
